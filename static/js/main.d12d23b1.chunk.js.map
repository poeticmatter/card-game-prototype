{"version":3,"sources":["components/Card.js","components/Zone.js","components/StackZone.js","components/DiscardZone.js","components/DeckZone.js","components/HandZone.js","components/PlayZone.js","utils/cardUtils.js","utils/csvParser.js","utils/cardActions.js","App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","card","cardDisplayType","_useState","useState","_useState2","_slicedToArray","isFaceUp","setIsFaceUp","_useDrag","useDrag","type","item","id","collect","monitor","isDragging","_useDrag2","drag","React","createElement","className","concat","ref","style","opacity","onClick","cardName","cardType","Zone","zoneName","onCardMove","children","_useDrop","useDrop","accept","drop","isOver","_useDrop2","StackZone","cards","topCard","length","cardCount","key","DiscardZone","DeckZone","HandZone","handleCardMove","cardId","map","isDeckZone","PlayZone","cardPositions","setCardPositions","newZone","handleDrop","x","y","zone","offset","getClientOffset","canDrop","_useDrop2$","isActive","cardPosition","element","position","left","top","onDrop","shuffleArray","array","shuffledArray","_toConsumableArray","i","j","Math","floor","random","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","parseCsv","_asyncToGenerator","_callee","csvFilePath","response","csvText","_Papa$parse","data","_context","fetch","text","Papa","parse","header","t0","console","_x","apply","arguments","moveZoneToDeckAndShuffle","setCards","prevCards","zoneCards","updatedDeck","Deck","shuffledDeck","_objectSpread","_defineProperty","App","Discard","Hand","Play","useEffect","loadCardData","process","cardsWithIndex","index","movedCard","find","findCard","updatedCards","filter","removeCard","movedCardWithNewZone","DndProvider","backend","HTML5Backend","deckCards","updatedHand","drawCardFromDeck","shuffledCards","handleShuffle","shuffleAllIntoDeck","document","setAttribute","display","body","appendChild","click","removeChild","onChange","event","file","target","files","reader","FileReader","onload","_ref2","_callee2","e","csvData","parsedData","_context2","log","_x2","onerror","readAsText","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d12d23b1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport \"./Card.css\"; // Import the Card CSS file\r\n\r\nconst Card = ({ card, cardDisplayType }) => {\r\n  const [isFaceUp, setIsFaceUp] = useState(\r\n    cardDisplayType === \"faceUp\" || cardDisplayType === \"both\"\r\n  );\r\n\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: \"card\",\r\n    item: { id: card.id },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  const handleClick = () => {\r\n    if (cardDisplayType === \"both\") {\r\n      setIsFaceUp(!isFaceUp);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`card ${isFaceUp ? \"\" : \"card-back\"}`}\r\n      ref={drag}\r\n      style={{ opacity: isDragging ? 0.5 : 1 }}\r\n      onClick={handleClick}\r\n    >\r\n      <h3 className=\"center-text\">{isFaceUp ? card.cardName : \"\"}</h3>\r\n      <p className=\"card-text\">{isFaceUp ? card.cardType : \"\"}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { useDrop } from \"react-dnd\";\r\n\r\nconst Zone = ({ zoneName, onCardMove, children }) => {\r\n  const [{ isOver }, drop] = useDrop(() => ({\r\n    accept: \"card\",\r\n    drop: (item) => onCardMove(item.id, zoneName),\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n    }),\r\n  }));\r\n\r\n  return (\r\n    <div ref={drop}>\r\n      <div className={`card-list ${isOver ? \"highlight\" : \"\"}`}>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Zone;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nimport Zone from \"./Zone\";\r\nimport \"./Zone.css\"; // Import the Zone CSS file\r\n\r\nconst StackZone = ({ zoneName, cards, onCardMove, cardDisplayType }) => {\r\n  const topCard = cards.length > 0 ? cards[cards.length - 1] : null;\r\n  const cardCount = cards.length;\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"zone-title center-text\">\r\n        {zoneName} ({cardCount})\r\n      </h2>\r\n      <Zone\r\n        zoneName={zoneName}\r\n        cards={cards}\r\n        onCardMove={onCardMove}\r\n        cardDisplayType={cardDisplayType}\r\n      >\r\n        <div className=\"single-card-zone\">\r\n          {topCard && (\r\n            <Card\r\n              key={topCard.id}\r\n              card={topCard}\r\n              onCardMove={onCardMove}\r\n              cardDisplayType={cardDisplayType}\r\n            />\r\n          )}\r\n        </div>\r\n      </Zone>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StackZone;\r\n","import React from \"react\";\r\nimport StackZone from \"./StackZone\";\r\n\r\nconst DiscardZone = ({ zoneName, cards, onCardMove }) => {\r\n  return (\r\n    <div>\r\n      <StackZone\r\n        zoneName={zoneName}\r\n        cards={cards}\r\n        onCardMove={onCardMove}\r\n        cardDisplayType=\"faceUp\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiscardZone;\r\n","import React from \"react\";\r\nimport StackZone from \"./StackZone\";\r\n\r\nconst DeckZone = ({ zoneName, cards, onCardMove }) => {\r\n  return (\r\n    <div>\r\n      <StackZone\r\n        zoneName={zoneName}\r\n        cards={cards}\r\n        onCardMove={onCardMove}\r\n        cardDisplayType=\"faceDown\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckZone;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport Zone from \"./Zone\";\r\nimport \"./Zone.css\"; // Import the Zone CSS file\r\n\r\nconst HandZone = ({ zoneName, cards, onCardMove }) => {\r\n  const handleCardMove = (cardId) => {\r\n    onCardMove(cardId, zoneName);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"zone-title center-text\">{zoneName}</h2>\r\n      <Zone zoneName={zoneName} onCardMove={handleCardMove}>\r\n        <div className=\"hand-zone\">\r\n          {cards.map((card) => (\r\n            <Card\r\n              key={card.id}\r\n              card={card}\r\n              isDeckZone={false}\r\n              onCardMove={handleCardMove}\r\n              zoneName={zoneName}\r\n              cardDisplayType=\"faceUp\"\r\n            />\r\n          ))}\r\n        </div>\r\n      </Zone>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HandZone;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport Card from \"./Card\";\r\nimport Zone from \"./Zone\";\r\nimport \"./Zone.css\"; // Import the Zone CSS file\r\n\r\nconst PlayZone = ({ zoneName, cards, onCardMove }) => {\r\n  const [cardPositions, setCardPositions] = useState([]);\r\n\r\n  const handleCardMove = (cardId, newZone) => {\r\n    onCardMove(cardId, newZone);\r\n  };\r\n\r\n  const handleDrop = (cardId, x, y) => {\r\n    cardPositions[cardId] = { x, y };\r\n    setCardPositions(cardPositions);\r\n  };\r\n\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: \"card\",\r\n    item: { cardId: null, zone: zoneName }, // Placeholder for cardId\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  const [{ canDrop, isOver }, drop] = useDrop(() => ({\r\n    accept: \"card\",\r\n    drop: (item, monitor) => {\r\n      const offset = monitor.getClientOffset();\r\n      if (offset) {\r\n        const x = offset.x;\r\n        const y = offset.y;\r\n        handleDrop(item.id, x, y);\r\n      }\r\n    },\r\n    collect: (monitor) => ({\r\n      canDrop: monitor.canDrop(),\r\n      isOver: monitor.isOver(),\r\n    }),\r\n  }));\r\n\r\n  const isActive = canDrop && isOver;\r\n\r\n  return (\r\n    <Zone zoneName={zoneName} onCardMove={handleCardMove}>\r\n      <div ref={drop} className={`play-zone ${isActive ? \"active\" : \"\"}`}>\r\n        {cards.map((card) => {\r\n          const cardPosition = cardPositions[card.id];\r\n          return (\r\n            <div\r\n              key={card.id}\r\n              ref={(element) => drag(element, { cardId: card.id })}\r\n              style={{\r\n                opacity: isDragging ? 0.5 : 1,\r\n                position: \"absolute\",\r\n                left: cardPosition ? cardPosition.x - 30 : 0,\r\n                top: cardPosition ? cardPosition.y - 60 : 0,\r\n              }}\r\n            >\r\n              <Card\r\n                card={card}\r\n                isDeckZone={false}\r\n                onCardMove={handleCardMove}\r\n                onDrop={handleDrop}\r\n                zoneName={zoneName}\r\n                cardDisplayType=\"faceUp\"\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </Zone>\r\n  );\r\n};\r\n\r\nexport default PlayZone;\r\n","export const shuffleArray = (array) => {\r\n  const shuffledArray = [...array];\r\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\r\n  }\r\n  return shuffledArray;\r\n};\r\n\r\nexport const findCard = (cards, cardId) => {\r\n  for (const zone in cards) {\r\n    const card = cards[zone].find((card) => card.id === cardId);\r\n    if (card) {\r\n      return card;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const removeCard = (cards, cardId) => {\r\n  const updatedCards = { ...cards };\r\n  for (const zone in updatedCards) {\r\n    updatedCards[zone] = updatedCards[zone].filter(\r\n      (card) => card.id !== cardId\r\n    );\r\n  }\r\n  return updatedCards;\r\n};\r\n","import Papa from \"papaparse\";\r\n\r\nexport const parseCsv = async (csvFilePath) => {\r\n  try {\r\n    const response = await fetch(csvFilePath);\r\n    const csvText = await response.text();\r\n    const { data } = Papa.parse(csvText, { header: true });\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Error parsing CSV:\", error);\r\n    return [];\r\n  }\r\n};\r\n","import { shuffleArray } from \"./cardUtils\";\r\n\r\nexport const drawCardFromDeck = (setCards) => {\r\n  setCards((prevCards) => {\r\n    const deckCards = prevCards.Deck;\r\n\r\n    if (deckCards.length === 0) {\r\n      return prevCards; // No cards in the deck\r\n    }\r\n\r\n    const topCard = deckCards[deckCards.length - 1];\r\n    const updatedDeck = deckCards.slice(0, -1);\r\n    const updatedHand = [...prevCards.Hand, topCard];\r\n\r\n    const updatedCards = {\r\n      ...prevCards,\r\n      Deck: updatedDeck,\r\n      Hand: updatedHand,\r\n    };\r\n\r\n    return updatedCards;\r\n  });\r\n};\r\n\r\nexport const handleShuffle = (zoneName, setCards) => {\r\n  setCards((prevCards) => {\r\n    const zoneCards = prevCards[zoneName];\r\n    const shuffledCards = shuffleArray(zoneCards);\r\n\r\n    const updatedCards = { ...prevCards };\r\n    updatedCards[zoneName] = shuffledCards;\r\n\r\n    return updatedCards;\r\n  });\r\n};\r\n\r\nexport const moveZoneToDeckAndShuffle = (zoneName, setCards) => {\r\n  setCards((prevCards) => {\r\n    const zoneCards = prevCards[zoneName];\r\n\r\n    if (zoneCards.length === 0) {\r\n      return prevCards; // No cards in the specified zone\r\n    }\r\n\r\n    const updatedDeck = [...prevCards.Deck, ...zoneCards];\r\n    const shuffledDeck = shuffleArray(updatedDeck);\r\n\r\n    const updatedCards = {\r\n      ...prevCards,\r\n      Deck: shuffledDeck,\r\n      [zoneName]: [],\r\n    };\r\n\r\n    return updatedCards;\r\n  });\r\n};\r\n\r\nexport const shuffleAllIntoDeck = (setCards) => {\r\n  moveZoneToDeckAndShuffle(\"Hand\", setCards, shuffleArray);\r\n  moveZoneToDeckAndShuffle(\"Discard\", setCards, shuffleArray);\r\n  moveZoneToDeckAndShuffle(\"Play\", setCards, shuffleArray);\r\n\r\n  // Add more zones if needed\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport DiscardZone from \"./components/DiscardZone\";\r\nimport DeckZone from \"./components/DeckZone\";\r\nimport HandZone from \"./components/HandZone\";\r\nimport PlayZone from \"./components/PlayZone\";\r\nimport { findCard, removeCard } from \"./utils/cardUtils\";\r\nimport { parseCsv } from \"./utils/csvParser\";\r\nimport {\r\n  drawCardFromDeck,\r\n  handleShuffle,\r\n  moveZoneToDeckAndShuffle,\r\n  shuffleAllIntoDeck,\r\n} from \"./utils/cardActions\";\r\nimport { parse } from \"papaparse\";\r\nimport \"./theme.css\";\r\n\r\nconst App = () => {\r\n  const [cards, setCards] = useState({\r\n    Deck: [],\r\n    Discard: [],\r\n    Hand: [],\r\n    Play: [],\r\n  });\r\n\r\n  const Footer = () => (\r\n    <footer className=\"footer\">\r\n      <p>\r\n        Created by Aurore Inara | Website:{\" \"}\r\n        <a href=\"https://timeshapers.com\">timeshapers.com</a> | Github:{\" \"}\r\n        <a href=\"https://github.com/poeticmatter/card-game-prototype\">\r\n          github.com/poeticmatter/card-game-prototype\r\n        </a>{\" \"}\r\n        | License: MIT\r\n      </p>\r\n    </footer>\r\n  );\r\n\r\n  useEffect(() => {\r\n    const csvPath = process.env.PUBLIC_URL + \"/data/cards.csv\";\r\n    loadCardData(csvPath);\r\n  }, []);\r\n\r\n  const loadCardData = async (csvFilePath) => {\r\n    try {\r\n      const data = await parseCsv(csvFilePath);\r\n      const cardsWithIndex = data.map((card, index) => ({\r\n        ...card,\r\n        id: `card-${index + 1}`,\r\n      }));\r\n\r\n      const updatedCards = {\r\n        Deck: cardsWithIndex, // Add all cards to the Deck zone\r\n        Discard: [],\r\n        Hand: [],\r\n        Play: [],\r\n      };\r\n\r\n      setCards(updatedCards);\r\n    } catch (error) {\r\n      console.error(\"Error loading card data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCardMove = (cardId, newZone) => {\r\n    setCards((prevCards) => {\r\n      // Find the card in the previous cards state\r\n      const movedCard = findCard(prevCards, cardId);\r\n      if (!movedCard) {\r\n        return prevCards; // Card not found, return the previous state\r\n      }\r\n\r\n      // Filter out the moved card from the previous cards\r\n      const updatedCards = removeCard(prevCards, cardId);\r\n\r\n      // Add the moved card to the new zone at the end\r\n      const movedCardWithNewZone = { ...movedCard };\r\n      updatedCards[newZone].push(movedCardWithNewZone);\r\n\r\n      return updatedCards;\r\n    });\r\n  };\r\n\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = async (e) => {\r\n      const csvData = e.target.result;\r\n      try {\r\n        const parsedData = parse(csvData, { header: true }).data;\r\n        console.log(\"parsedData\", parsedData);\r\n        const updatedCards = {\r\n          Deck: parsedData, // Replace the Deck zone with the new data\r\n          Discard: [],\r\n          Hand: [],\r\n          Play: [],\r\n        };\r\n        console.log(\"updated cards\", updatedCards);\r\n        setCards(updatedCards);\r\n      } catch (error) {\r\n        console.error(\"Error parsing CSV:\", error);\r\n      }\r\n    };\r\n\r\n    reader.onerror = (e) => {\r\n      console.error(\"Error reading file:\", e.target.error);\r\n    };\r\n\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  const downloadTemplate = () => {\r\n    const element = document.createElement(\"a\");\r\n    const templateURL = process.env.PUBLIC_URL + \"/data/cards.csv\";\r\n    element.setAttribute(\"href\", templateURL);\r\n    element.setAttribute(\"download\", \"cards.csv\");\r\n    element.style.display = \"none\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"zones\">\r\n        <DndProvider backend={HTML5Backend}>\r\n          <div className=\"zones-row\">\r\n            <PlayZone\r\n              zoneName=\"Play\"\r\n              cards={cards.Play}\r\n              onCardMove={handleCardMove}\r\n            />\r\n          </div>\r\n          <div className=\"zones-row\">\r\n            <HandZone\r\n              zoneName=\"Hand\"\r\n              cards={cards.Hand}\r\n              onCardMove={handleCardMove}\r\n            />\r\n            <DeckZone\r\n              zoneName=\"Deck\"\r\n              cards={cards.Deck}\r\n              onCardMove={handleCardMove}\r\n              cardDisplayType=\"faceDown\"\r\n            />\r\n            <DiscardZone\r\n              zoneName=\"Discard\"\r\n              cards={cards.Discard}\r\n              onCardMove={handleCardMove}\r\n              cardDisplayType=\"faceUp\"\r\n            />\r\n          </div>\r\n          <div className=\"button-container\">\r\n            <button onClick={() => drawCardFromDeck(setCards)}>\r\n              Draw Card\r\n            </button>\r\n            <button onClick={() => handleShuffle(\"Deck\", setCards)}>\r\n              Shuffle Deck\r\n            </button>\r\n            <button\r\n              onClick={() => moveZoneToDeckAndShuffle(\"Discard\", setCards)}\r\n            >\r\n              Discard into Deck\r\n            </button>\r\n            <button onClick={() => shuffleAllIntoDeck(setCards)}>\r\n              All into Deck\r\n            </button>\r\n            <button onClick={downloadTemplate}>Download Template</button>\r\n            <input type=\"file\" onChange={handleFileUpload} />\r\n          </div>\r\n        </DndProvider>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}